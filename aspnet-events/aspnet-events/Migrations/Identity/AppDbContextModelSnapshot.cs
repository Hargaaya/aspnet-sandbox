// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using aspnet_events.Data;

#nullable disable

namespace aspnet_events.Migrations.Identity
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("aspnet_events.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "748a69e9-fc2f-461f-a2c5-cc3d22771351",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6336f7ff-20eb-4477-b51e-4196898a67e0",
                            Email = "Karlsonpataket@telia.se",
                            EmailConfirmed = false,
                            FirstName = "Karlson",
                            LastName = "Taket",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJVWWjuuzgKYTTAoOQqaS1sqZomJAWq7qLqxuqI0OFQ8Vk3FrOUkbTEE8VIQc07lIA==",
                            PhoneNumber = "+46739149576",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9f090c1-4131-4fb3-b062-a9271d40bc7c",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "781231d3-90c5-4e55-b7c9-e27bd26be513",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "200400d5-e793-4092-b610-eaeceb5fce92",
                            Email = "Bulle@bubble.se",
                            EmailConfirmed = false,
                            FirstName = "Bubbles",
                            LastName = "Jonóre",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEIVzzgUH6mE6jdV2BvGeFiHr5UuAHl+U//8FXw69XBNUCcHkloAzZxAHJq/SyUty7Q==",
                            PhoneNumber = "+46091239012",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ff1db89-378c-4768-b6c7-9ca84faf79aa",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "0c5cdc66-a621-4c0c-9ccd-f661674dc62d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42537766-6e69-4355-8a41-a26a436fc8c6",
                            Email = "Streetscripters@gamb.com",
                            EmailConfirmed = false,
                            FirstName = "Street",
                            LastName = "Scripters",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPPr5bKQ363evVTe9cdJfmrrGfzpdV5Yo0r8uSqwT3ieMs5k/b5UZd7fcL8UkLKw7Q==",
                            PhoneNumber = "+45902319459",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "766cbb07-bde3-4653-95e8-7b3408d6f578",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("aspnet_events.Models.UserEvent", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpotsAvailable")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            Address = "Grazie 15, 957864 Pregi",
                            Date = new DateTimeOffset(new DateTime(2022, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Stora affärer is hosting a festival to start of this years spaghetti harvest in Italy",
                            OrganizerId = "781231d3-90c5-4e55-b7c9-e27bd26be513",
                            Place = "Mi scusi",
                            SpotsAvailable = 40,
                            Title = "Spaghetti harvesting festival"
                        },
                        new
                        {
                            EventId = 2,
                            Address = "Sveavägen 73, 113 80 Stockholm",
                            Date = new DateTimeOffset(new DateTime(2022, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "The cockroach Lil Pest is having a listening party for his 9th album",
                            OrganizerId = "781231d3-90c5-4e55-b7c9-e27bd26be513",
                            Place = "Stadsbiblioteket",
                            SpotsAvailable = 120,
                            Title = "Lil Pest Listening party"
                        },
                        new
                        {
                            EventId = 3,
                            Address = "Humongous Street 23, 80468 Las Vegas, Nevada",
                            Date = new DateTimeOffset(new DateTime(2023, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Annual international event dedicated to the commercial concrete and masonry construction industries.",
                            OrganizerId = "781231d3-90c5-4e55-b7c9-e27bd26be513",
                            Place = "The Gazino",
                            SpotsAvailable = 1500,
                            Title = "World of Concrete"
                        },
                        new
                        {
                            EventId = 4,
                            Address = "Big Avenue, 90652 Dallas, Texas",
                            Date = new DateTimeOffset(new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "The show will display the next wave of innovation that will shape 2022",
                            OrganizerId = "781231d3-90c5-4e55-b7c9-e27bd26be513",
                            Place = "Big Avenue",
                            SpotsAvailable = 1000,
                            Title = "CES 2022"
                        },
                        new
                        {
                            EventId = 5,
                            Address = "Lorem 23, 0xFFFF Ipsum",
                            Date = new DateTimeOffset(new DateTime(2022, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed to",
                            OrganizerId = "781231d3-90c5-4e55-b7c9-e27bd26be513",
                            Place = "127.0.0.1",
                            SpotsAvailable = 5,
                            Title = "Lorem ipsum Conference"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1fb96894-87ad-4af5-9e02-e3703f2259f7",
                            ConcurrencyStamp = "4eb06333-bdfd-4e59-a10a-9bb0ec20ee64",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "da981ce2-f658-4e40-87c6-d93d5e2ffbe2",
                            ConcurrencyStamp = "8be03b45-77be-4717-b9f9-1ceccc08bb3f",
                            Name = "Organizer"
                        },
                        new
                        {
                            Id = "2fea37b6-ad6c-4122-933b-76da443b4db5",
                            ConcurrencyStamp = "ce044618-01ed-4a28-831c-4163726f877b",
                            Name = "Attendee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "748a69e9-fc2f-461f-a2c5-cc3d22771351",
                            RoleId = "1fb96894-87ad-4af5-9e02-e3703f2259f7"
                        },
                        new
                        {
                            UserId = "781231d3-90c5-4e55-b7c9-e27bd26be513",
                            RoleId = "da981ce2-f658-4e40-87c6-d93d5e2ffbe2"
                        },
                        new
                        {
                            UserId = "0c5cdc66-a621-4c0c-9ccd-f661674dc62d",
                            RoleId = "da981ce2-f658-4e40-87c6-d93d5e2ffbe2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UserUserEvent", b =>
                {
                    b.Property<string>("AttendeesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JoinedEventsEventId")
                        .HasColumnType("int");

                    b.HasKey("AttendeesId", "JoinedEventsEventId");

                    b.HasIndex("JoinedEventsEventId");

                    b.ToTable("UserUserEvent");
                });

            modelBuilder.Entity("aspnet_events.Models.UserEvent", b =>
                {
                    b.HasOne("aspnet_events.Models.User", "Organizer")
                        .WithMany("HostedEvents")
                        .HasForeignKey("OrganizerId");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("aspnet_events.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("aspnet_events.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("aspnet_events.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("aspnet_events.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUserEvent", b =>
                {
                    b.HasOne("aspnet_events.Models.User", null)
                        .WithMany()
                        .HasForeignKey("AttendeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("aspnet_events.Models.UserEvent", null)
                        .WithMany()
                        .HasForeignKey("JoinedEventsEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("aspnet_events.Models.User", b =>
                {
                    b.Navigation("HostedEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
