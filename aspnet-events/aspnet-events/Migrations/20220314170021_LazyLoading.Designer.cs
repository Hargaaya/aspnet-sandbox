// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using aspnet_events.Data;

#nullable disable

namespace aspnet_events.Migrations
{
    [DbContext(typeof(EventsContext))]
    [Migration("20220314170021_LazyLoading")]
    partial class LazyLoading
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("aspnet_events.Models.Attendee", b =>
                {
                    b.Property<int>("AttendeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendeeId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttendeeId");

                    b.ToTable("Attendees");

                    b.HasData(
                        new
                        {
                            AttendeeId = 1,
                            Email = "CautiousCow@animail.com",
                            Name = "CautiousCow",
                            PhoneNumber = "+4689424241"
                        },
                        new
                        {
                            AttendeeId = 2,
                            Email = "ReasonableShark@animail.com",
                            Name = "ReasonableShark",
                            PhoneNumber = "+4689428761"
                        },
                        new
                        {
                            AttendeeId = 3,
                            Email = "AmusedCat@animail.com",
                            Name = "AmusedCat",
                            PhoneNumber = "+4646228051"
                        },
                        new
                        {
                            AttendeeId = 4,
                            Email = "JoblessRat@animail.com",
                            Name = "JoblessRat",
                            PhoneNumber = "+4689574051"
                        });
                });

            modelBuilder.Entity("aspnet_events.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpotsAvailable")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            Address = "Grazie 15, 957864 Pregi",
                            Date = new DateTimeOffset(new DateTime(2022, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Stora affärer is hosting a festival to start of this years spaghetti harvest in Italy",
                            OrganizerId = 1,
                            Place = "Mi scusi",
                            SpotsAvailable = 40,
                            Title = "Spaghetti harvesting festival"
                        },
                        new
                        {
                            EventId = 2,
                            Address = "Sveavägen 73, 113 80 Stockholm",
                            Date = new DateTimeOffset(new DateTime(2022, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "The cockroach Lil Pest is having a listening party for his 9th album",
                            OrganizerId = 2,
                            Place = "Stadsbiblioteket",
                            SpotsAvailable = 120,
                            Title = "Lil Pest Listening party"
                        },
                        new
                        {
                            EventId = 3,
                            Address = "Humongous Street 23, 80468 Las Vegas, Nevada",
                            Date = new DateTimeOffset(new DateTime(2023, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Annual international event dedicated to the commercial concrete and masonry construction industries.",
                            OrganizerId = 2,
                            Place = "The Gazino",
                            SpotsAvailable = 1500,
                            Title = "World of Concrete"
                        },
                        new
                        {
                            EventId = 4,
                            Address = "Big Avenue, 90652 Dallas, Texas",
                            Date = new DateTimeOffset(new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "The show will display the next wave of innovation that will shape 2022",
                            OrganizerId = 3,
                            Place = "Big Avenue",
                            SpotsAvailable = 1000,
                            Title = "CES 2022"
                        },
                        new
                        {
                            EventId = 5,
                            Address = "Lorem 23, 0xFFFF Ipsum",
                            Date = new DateTimeOffset(new DateTime(2022, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed to",
                            OrganizerId = 3,
                            Place = "127.0.0.1",
                            SpotsAvailable = 5,
                            Title = "Lorem ipsum Conference"
                        });
                });

            modelBuilder.Entity("aspnet_events.Models.Organizer", b =>
                {
                    b.Property<int>("OrganizerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizerId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizerId");

                    b.ToTable("Organizers");

                    b.HasData(
                        new
                        {
                            OrganizerId = 1,
                            Email = "contact@storaaffarer.se",
                            Name = "Stora affärer AB",
                            PhoneNumber = "+4639401402"
                        },
                        new
                        {
                            OrganizerId = 2,
                            Email = "contact@großesgeschäft.ge",
                            Name = "Großes geschäft AG",
                            PhoneNumber = "+4639401402"
                        },
                        new
                        {
                            OrganizerId = 3,
                            Email = "contact@grosseaffaire.fr",
                            Name = "Grosse affaire SA",
                            PhoneNumber = "+4639401402"
                        });
                });

            modelBuilder.Entity("AttendeeEvent", b =>
                {
                    b.Property<int>("AttendeesAttendeeId")
                        .HasColumnType("int");

                    b.Property<int>("EventsEventId")
                        .HasColumnType("int");

                    b.HasKey("AttendeesAttendeeId", "EventsEventId");

                    b.HasIndex("EventsEventId");

                    b.ToTable("AttendeeEvent");

                    b.HasData(
                        new
                        {
                            AttendeesAttendeeId = 1,
                            EventsEventId = 1
                        },
                        new
                        {
                            AttendeesAttendeeId = 2,
                            EventsEventId = 1
                        },
                        new
                        {
                            AttendeesAttendeeId = 3,
                            EventsEventId = 2
                        },
                        new
                        {
                            AttendeesAttendeeId = 4,
                            EventsEventId = 2
                        },
                        new
                        {
                            AttendeesAttendeeId = 1,
                            EventsEventId = 3
                        },
                        new
                        {
                            AttendeesAttendeeId = 2,
                            EventsEventId = 3
                        },
                        new
                        {
                            AttendeesAttendeeId = 3,
                            EventsEventId = 4
                        },
                        new
                        {
                            AttendeesAttendeeId = 4,
                            EventsEventId = 4
                        });
                });

            modelBuilder.Entity("aspnet_events.Models.Event", b =>
                {
                    b.HasOne("aspnet_events.Models.Organizer", "Organizer")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("AttendeeEvent", b =>
                {
                    b.HasOne("aspnet_events.Models.Attendee", null)
                        .WithMany()
                        .HasForeignKey("AttendeesAttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("aspnet_events.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("aspnet_events.Models.Organizer", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
